version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mokabu-lens-postgres-dev
    environment:
      POSTGRES_DB: mokabu_lens_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./apps/api/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mokabu-lens-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: mokabu-lens-api-dev
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mokabu_lens_dev
      - PYTHONPATH=/app
      - PYTHON_ENV=development
    ports:
      - "8000:8000"
    volumes:
      - ./apps/api:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mokabu-lens-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: mokabu-lens-web-dev
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      api:
        condition: service_healthy
    networks:
      - mokabu-lens-network
    command: pnpm dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_dev_data:

networks:
  mokabu-lens-network:
    driver: bridge
